# -*- coding: utf-8 -*-
"""Playable Blackjack

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pwWUyrb5FmKtgLS1LMR7O1oFc4u3AjKu
"""



#Functional Blackjack: A basic simulation of a blackjack game between a player and dealer

import random as rd # For card drawing

class Card: # Represents a single playing card
  def __init__(self, suit, rank, face_up = False):
    self.suit = suit
    self.rank = rank
    self.face_up = face_up

  def __str__(self):
    return f"{self.rank} of {self.suit}" if self.face_up else "Face Down"

  def flipCard(self):
    self.face_up = not self.face_up

  def getRank(self):
    return self.rank

ranks = { # Dictionary to convert rank to numerical value for scoring
  '2': 2,
  '3': 3,
  '4': 4,
  '5': 5,
  '6': 6,
  '7': 7,
  '8': 8,
  '9': 9,
  '10': 10,
  'J': 10,
  'Q': 10,
  'K':10,
  "A": [1,11]
}

rank_to_draw_card = {# Used to randomly draw a card
  2: '2',
  3: '3',
  4: '4',
  5: '5',
  6: '6',
  7: '7',
  8: '8',
  9: '9',
  10: '10',
  11: "J",
  12: "Q",
  13: "K",
  14: "A"
}

suits = { # Used to randomly assign suits to cards
  1: "Spades",
  2: "Hearts",
  3: "Diamonds",
  4: "Clubs"
}

def drawCard(): # Randomly generates and returns a new Card object
  rank_number = rd.randint(2,14)
  suit_number = rd.randint(1,4)
  rank = rank_to_draw_card[rank_number]
  suit = suits[suit_number]
  return Card(suit, rank)

class Player: # Represents a player (or dealer) in the game
  def __init__(self, hand, active = True, is_dealer = False, winner = False):
    self.hand = hand # List of Card objects
    self.active = active # Whether player is still in the game
    self.is_dealer = is_dealer # True for dealer logic
    self.winner = winner  # True if this player wins

  def hit(self, face_up=True): # Adds a new card to hand (optionally face up)
    new_card = drawCard()
    if face_up:
        new_card.flipCard()
    self.hand.append(new_card)


  def stand(self):
    self.active = False

  def soft_17(self): # Detects if hand is a soft 17 (Ace counted as 11 + 6)
    total = 0
    num_aces = 0
    for card in self.hand:
        if card.rank == "A":
            num_aces += 1
            total += 11
        else:
            total += ranks[card.rank]
    # If total is exactly 17 and includes an Ace counted as 11
    return total == 17 and num_aces > 0

  def get_hand_value(self):  # Calculates the total hand value, treating aces as 11 or 1
    total = 0
    num_aces = 0
    for i in self.hand:
      if i.face_up:
        if i.rank == "A":
          num_aces += 1
          total += 11
        else:
          total += ranks[i.rank]
    while num_aces > 0 and total > 21:
        total -=10
        num_aces -=1
    return total

  def display_hand(self):  # Prints all cards in the player's hand
    for i in self.hand:
      print (f"-{i}")

def startGame(player, dealer): # Deals 2 cards to player and dealer
    player.hit()
    player.hit()
    print ("Player gets: ")
    player.display_hand()
    dealer.hit(face_up = False)
    dealer.hit()
    print ("Dealer gets: ")
    dealer.display_hand()
# Main Code
# Initialize players
player = Player(hand = [], active = True, is_dealer = False, winner = False)
dealer = Player(hand = [], active = False, is_dealer = True, winner = False)

startGame(player, dealer)

# Player's turn logic
if player.get_hand_value() < 21:
  while player.active:
    print ("What is your next move? \n1) Hit\n2) Stand\n3) View hand")
    next_move = input()
    if next_move == "1":
      player.hit()
      print("Player draws and gets: " + str(player.hand[-1]))
      if player.get_hand_value() > 21:
        print("Player busts!")
        player.active = False
        dealer.winner = True
      elif player.get_hand_value() == 21:
        print("Player hits BlackJack! It is now the dealer's turn.")
        player.active = False
    elif next_move == "2":
      print("It is now the dealer's turn.")
      player.stand()
      dealer.active = True
      break
    elif next_move == "3":
      player.display_hand()
    else:
      print("Not a valid choice. Try again.")
elif player.get_hand_value() == 21:
  print("Player hits BlackJack! It is now the dealer's turn.")
  player.active = False


# Dealer's turn logic (only if player didnâ€™t bust immediately)
if not dealer.winner:
  dealer.active = True
  dealer.hand[0].flipCard()
  print("Dealer reveals first card:", dealer.hand[0])
  if dealer.get_hand_value() == 21 and player.get_hand_value() == 21:
    print("Both player and dealer have blackjack! It's a draw.")
  while dealer.active:
    if dealer.get_hand_value() > 21:
      print("Dealer busts! Player wins.")
      dealer.active = False
      player.winner = True
    elif dealer.get_hand_value() > player.get_hand_value():
      dealer.winner = True
      dealer.active = False
    elif dealer.get_hand_value() == 21:
      print("Dealer hits BlackJack!")
      dealer.active = False
    elif dealer.get_hand_value() < 17 or dealer.soft_17():
      print ("Dealer is at " + str(dealer.get_hand_value()))
      dealer.hit()
      print("Dealer draws and gets: " + str(dealer.hand[-1]))
    else:
      print("Dealer stands.")
      dealer.active = False

# Determine game outcome
if dealer.get_hand_value() == 21 and player.get_hand_value() == 21:
    print("Both player and dealer have blackjack! It's a draw.")

elif player.get_hand_value() > dealer.get_hand_value() and player.get_hand_value() <= 21 and dealer.get_hand_value() <= 21:
    player.winner = True

elif dealer.winner:
    print("Dealer wins!")

elif player.winner:
    print("Player wins!")

else:
    print("It's a draw.")

print("\nFinal Hands:")
print("Player:")
player.display_hand()
print("Dealer:")
dealer.display_hand()