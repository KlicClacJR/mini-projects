# -*- coding: utf-8 -*-
"""Estimating Euler's Number With Newton's Method

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y0pjFGeaY7eIShhrSYmasj5HETLKjNBM
"""

import math


# Introduction and user input for number of iterations
print ("Hello. This code will use Newton's method to estimate the value of Euler's number. How many iterations would you like to do?")
iterations = input()

# Validate input to ensure it's a positive integer
while True:
  try:
    int(iterations)
    if int(iterations) > 0:
      break
    else:
      print ("That is not a valid number. Please try again.")
      iterations = input()
  except ValueError:
    print ("That is not a valid number. Please try again.")
    iterations = input()

iterations = int(iterations)

# Define the function f(x) = ln(x) - 1, whose root is at x = e
def function(x):
  return math.log(x) - 1

# Derivative of f(x): f'(x) = 1/x
def FPrime(x):
  return 1/x

# Newton's method formula: xₙ₊₁ = xₙ - f(xₙ) / f'(xₙ)
def NewtonsMethod(i):
  return i - function(i) / FPrime(i)

# Initialize list to store iteration results
my_list = [0]
my_list[0] = 3 #initial guess

# Known value of e for comparison
e = str("2.7182818284590452353602874713526624977572470936999595749669676277240766303535945713821785251664274")

# Perform Newton's method iteration
counter = 0
while counter <= iterations:
  my_list.append(NewtonsMethod(my_list[counter]))
  counter+=1

# Print final approximation
print (f"{my_list[-1]:.60f}")
print ( e + " Actual value.")
print ("Number of iterations: " + str(iterations))

# Compare the calculated value to the known value of e
# and count how many digits are correct
result_str = str(my_list[-1])
digits_correct = 0
index = 0
while index < len(e) and index < len(result_str):
  if e[index] == result_str[index]:
    digits_correct += 1
    index += 1
  else:
    break

# Subtract 1 from digits_correct because of "2." at the start
print ("Correct digits: " + str(digits_correct-1))