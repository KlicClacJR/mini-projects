# -*- coding: utf-8 -*-
"""ATM_With_Comments

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12jejnEPKRuPCUtcChGe1cBi5CHgj-kSp
"""

# Importing necessary tools for abstract base class creation
from abc import ABC, abstractmethod

# Abstract base class representing a general Bank Account
class Account(ABC):

  # Initialize balance and account owner
  def __init__ (self, balance, owner):
    self.balance = balance
    self.owner = owner

  # Deposit method: adds funds to the account
  def deposit(self, amount):
    self.balance += float(amount)

  # Abstract method to enforce custom withdrawal logic in subclasses
  @abstractmethod
  def withdraw(self, amount):
    pass

  # Returns current balance as a string
  def show_amount(self):
    return str(self.balance)

# CheckingAccount inherits from Account
class CheckingAccount(Account):
   # Withdraw method subtracts the amount
  def withdraw(self, amount):
    self.balance -= float(amount)

# SavingsAccount inherits from Account
class SavingsAccount(Account):
  # Withdraw method is the same here as well
  def withdraw(self, amount):
    self.balance -= float(amount)

# BusinessAccount allows overdraft up to a limit($100000)
class BusinessAccount(Account):
  def __init__(self, balance, owner, overdraft_limit=100000):
    super().__init__(balance, owner)
    self.overdraft_limit = overdraft_limit

  # Withdraws even if balance is below zero (up to overdraft limit)
  def withdraw(self, amount):
      self.balance -= float(amount)

# Start of the ATM simulation
print ("Welcome to the ATM! Please Enter your name.")
user_name = input()
user_name = user_name.capitalize() # Capitalize name for formatting
print ("Hello " + user_name +", what account would you like to see?\n1)Checkings Account\n2)Savings Account\n3)Business Account")

# User selects account type
user_choice = input()

# Create the corresponding account object based on user input
if user_choice == "1":
  account = CheckingAccount(1000, user_name)
elif user_choice == "2":
  account = SavingsAccount(10000, user_name)
elif user_choice == "3":
  account = BusinessAccount(5000000, user_name + ".LLC")
else:
  print ("Invalid selection. Defaulting to checkings.")
  account = CheckingAccount(1000, user_name)

# Main loop for ATM menu
while True:
  print ("\nWhat would you like to do?\n1)Deposit\n2)Withdraw\n3)Check Balance\n4)Exit")
  choice = input()

   # Deposit
  if choice == "1":
    print ("How much money would you like to deposit?")
    money_depositing = input()

    # Input validation loop for deposit amount
    while True:
      try:
        float(money_depositing)
        if float(money_depositing) > 0:
          account.deposit(money_depositing)
          str_money_depositing = str(money_depositing)
          string_balance = str(account.balance)
          print(f"${str_money_depositing} deposited. New balance: ${string_balance}")
          break
        else:
          print ("Not a valid amount. Please try again.")
          money_depositing = input()
      except ValueError:
        print ("Not a valid amount. Please try again.")
        money_depositing = input()

  # Withdraw
  elif choice == "2":
    print ("How much money would you like to withdraw?")
    money_withdrawing = input()

    # Input validation and overdraft check
    while True:
      try:
        float(money_withdrawing)
        if user_choice == "3": # Business account with overdraft
          if float(money_withdrawing) > 0 and float(money_withdrawing) <= account.balance + account.overdraft_limit:
            account.withdraw(money_withdrawing)
            str_money_withdrawing = str(money_withdrawing)
            string_balance = str(account.balance)
            print(f"${str_money_withdrawing} withdrawn. New balance: ${string_balance}")
            break
          else:
            print ('Insufficient funds in account or you have entered an invalid amount. Please try again.')
            money_withdrawing = input()

        # Personal accounts (no overdraft)
        else:
          if float(money_withdrawing) > 0 and float(money_withdrawing) <= account.balance:
            account.withdraw(money_withdrawing)
            str_money_withdrawing = str(money_withdrawing)
            string_balance = str(account.balance)
            print(f"${str_money_withdrawing} withdrawn. New balance: ${string_balance}")
            break
          else:
            print ('Insufficient funds in account or you have entered an invalid amount. Please try again.')
            money_withdrawing = input()
      except ValueError:
        print ("Not a valid amount. Please try again.")
        money_withdrawing = input()

  # Show balance
  elif choice == "3":
    money = str(account.show_amount())
    print ("Your current balance: $" + money)

   # Exit
  elif choice == "4":
    print("Thank you for using the ATM. Have a good day.")
    break

  # Invalid menu choice
  else:
    print ("Invalid choice. Please try again.")