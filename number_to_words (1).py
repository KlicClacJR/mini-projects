# -*- coding: utf-8 -*-
"""number to words

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qUtxCH4K-2CtgV5EtJ7-pHfU7vWV23Yo
"""

# Prompt the user to enter an integer
print("Hello. This program will spell out your integer in english (up to 1 trillion.) Please enter an integer")
x_string=input()

# Input validation loop to ensure a valid integer not exceeding 1 trillion
while True:
  try:
    number=int(x_string)
    if number > 1000000000000:
      print("That is too large. Please try again.")
      x_string= input()
    else:
      break
  except ValueError:
    print("That is not a valid number. Please try again.")
    x_string= input()

# Dictionary for single-digit numbers
digits = {
    0: "",
    1: "one",
    2: "two",
    3: "three",
    4: "four",
    5: "five",
    6: "six",
    7: "seven",
    8: "eight",
    9: "nine"
}

# Dictionary for numbers 10-19
teens = {
    10: "ten",
    11: "eleven",
    12: "twelve",
    13: "thirteen",
    14: "fourteen",
    15: "fifteen",
    16: "sixteen",
    17: "seventeen",
    18: "eighteen",
    19: "nineteen"
}

# Dictionary for tens
tens = {
    20: "twenty",
    30: "thirty",
    40: "forty",
    50: "fifty",
    60: "sixty",
    70: "seventy",
    80: "eighty",
    90: "ninety"
}

# Converts a number < 1000 into English words
def three_digit_to_words(x):

  # Handle hundreds place
  hundred_chunk= x%1000
  hundred_digit= hundred_chunk//100
  hundred_string=""
  if hundred_digit>0:
    hundred_string = digits[hundred_digit] + " hundred"

  # Handle tens and ones place
  ten_chunk=hundred_chunk%100
  ten_string = ""
  if ten_chunk==0:
    ten_string = ""
  elif ten_chunk>9 and ten_chunk<20:
    ten_string = teens[ten_chunk]
  elif ten_chunk<20:
    ten_string = digits[ten_chunk]
  else:
    if ten_chunk%10==0:
      ten_string= tens[ten_chunk//10*10]
    else:
      ten_string = tens[ten_chunk//10*10] +" "+ digits[ten_chunk%10]

  # Combine hundreds and tens/ones string
  if hundred_string == "":
    return ten_string
  else:
    return hundred_string + " " + ten_string


# List to store parts of the number in words
printList = []
remaining_number = number
chunk_counter=0
result_string=""

# Process the number in 3-digit chunks from right to left
while remaining_number>0:
  result_string=three_digit_to_words(remaining_number)

  # Append chunk with appropriate place value
  if chunk_counter==0:
    printList.append(result_string)

  if chunk_counter == 1:
    if result_string == "":
      pass
    else:
      printList.append(result_string + " thousand")
  elif chunk_counter == 2:
    if result_string == "":
      pass
    else:
      printList.append(result_string + " million")
  elif chunk_counter == 3:
    if result_string == "":
      pass
    else:
      printList.append(result_string + " billion")

  # Program limit: one trillion
  elif chunk_counter==4:
    print ("one trillion")
    quit()

  # Move to next chunk
  remaining_number=remaining_number//1000
  chunk_counter+=1

# Special case for 0
if number==0:
  print("zero")
  quit()

# Reverse list to correct order, capitalize, and join into final string
printList.reverse()
english_presentation = " ".join(printList)
capitalized_english_presentation = english_presentation.capitalize()
print(capitalized_english_presentation)

